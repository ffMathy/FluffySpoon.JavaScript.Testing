{"version":3,"file":"Substitute.js","sourceRoot":"","sources":["../../src/Substitute.ts"],"names":[],"mappings":"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","sourcesContent":["import { ObjectSubstitute } from \"./Transformations\";\r\nimport { ProxyObjectContext, ProxyPropertyContext, ProxyMethodPropertyContext, ProxyCallRecord, ProxyExpectation } from \"./Context\";\r\nimport { stringifyCalls, stringifyArguments } from \"./Utilities\";\r\n\r\nexport class Substitute {\r\n\r\n    static for<T>(): ObjectSubstitute<T> {\r\n        const objectContext = new ProxyObjectContext();\r\n\r\n        let thisProxy: ObjectSubstitute<T>;\r\n        return thisProxy = new Proxy(() => { }, {\r\n            apply: (_target, _thisArg, argumentsList) => {\r\n                const propertyContext = objectContext.property;\r\n\r\n                if (propertyContext.type === 'function') {\r\n                    let existingCalls = objectContext.findActualMethodCalls(propertyContext.name, argumentsList);\r\n                    if (existingCalls.length === 0)\r\n                        return void 0;\r\n\r\n                    const expected = objectContext.calls.expected;\r\n                    if(expected && expected.callCount !== void 0) {\r\n                        expected.arguments = argumentsList;\r\n                        expected.propertyName = propertyContext.name;\r\n                        \r\n                        this.assertCallMatchCount('method', expected, existingCalls);\r\n                        return thisProxy;\r\n                    }\r\n\r\n                    const existingCall = existingCalls[0];\r\n                    if(existingCall)\r\n                        existingCall.callCount++;\r\n\r\n                    if(!existingCall)\r\n                        return propertyContext.method.returnValues[0];\r\n\r\n                    if(propertyContext.method.returnValues)\r\n                        return propertyContext.method.returnValues[existingCall.callCount - 1];\r\n                    \r\n                    return void 0;\r\n                }\r\n\r\n                const newMethodPropertyContext = propertyContext.promoteToMethod();\r\n                newMethodPropertyContext.method.arguments = argumentsList;\r\n                newMethodPropertyContext.method.returnValues = null;\r\n\r\n                return thisProxy;\r\n            },\r\n            set: (_target, property, value) => {\r\n                const propertyContext = objectContext.property;\r\n                const argumentsList = [value];\r\n\r\n                let existingCalls = objectContext.findActualMethodCalls(propertyContext.name, argumentsList);\r\n                if (existingCalls.length > 0 && propertyContext.type === 'function') {\r\n                    const expected = objectContext.calls.expected;                    \r\n                    if (expected && expected.callCount !== void 0) {\r\n                        expected.arguments = argumentsList;\r\n                        expected.propertyName = propertyContext.name;\r\n\r\n                        this.assertCallMatchCount('property', expected, existingCalls);\r\n                        return true;\r\n                    }\r\n\r\n                    const existingCall = existingCalls[0];\r\n                    existingCall.callCount++;\r\n\r\n                    return true;\r\n                }\r\n\r\n                const newMethodPropertyContext = new ProxyMethodPropertyContext();\r\n                newMethodPropertyContext.name = property.toString();\r\n                newMethodPropertyContext.type = 'function';\r\n                newMethodPropertyContext.method.arguments = argumentsList;\r\n                newMethodPropertyContext.method.returnValues = argumentsList;\r\n\r\n                objectContext.property = newMethodPropertyContext;\r\n\r\n                objectContext.addActualPropertyCall();\r\n\r\n                return true;\r\n            },\r\n            get: (target, property) => {\r\n                if (typeof property === 'symbol') {\r\n                    if (property === Symbol.toPrimitive)\r\n                        return () => void 0;\r\n\r\n                    return void 0;\r\n                }\r\n\r\n                if (property === 'valueOf')\r\n                    return void 0;\r\n\r\n                if (property === 'toString')\r\n                    return (target[property] || '').toString();\r\n\r\n                if (property === 'inspect')\r\n                    return () => '{SubstituteJS fake}';\r\n\r\n                if (property === 'constructor')\r\n                    return () => thisProxy;\r\n\r\n                const currentPropertyContext = objectContext.property;\r\n                if (property === 'returns') {\r\n                    if (currentPropertyContext.type === 'object') {\r\n                        return (...args: any[]) => {\r\n                            if(currentPropertyContext.mimicks)\r\n                                currentPropertyContext.mimicks = void 0;\r\n\r\n                            objectContext.getLastCall().callCount--;\r\n                            currentPropertyContext.returnValues = args;\r\n                        };\r\n                    }\r\n\r\n                    if (currentPropertyContext.type === 'function') {\r\n                        return (...args: any[]) => {\r\n                            if(currentPropertyContext.mimicks)\r\n                                currentPropertyContext.mimicks = void 0;\r\n\r\n                            objectContext.getLastCall().callCount--;\r\n                            currentPropertyContext.method.returnValues = args;\r\n                        };\r\n                    }\r\n                }\r\n\r\n                if(property === 'mimicks') {\r\n                    return (value: T|Function) => {\r\n                        if(currentPropertyContext.type === 'object')\r\n                            currentPropertyContext.returnValues = void 0;\r\n                            \r\n                        if(currentPropertyContext.type === 'function')\r\n                            currentPropertyContext.method.returnValues = void 0;\r\n                        \r\n                        if(typeof value === 'function') {\r\n                            currentPropertyContext.mimicks = value;\r\n                        } else {\r\n                            const currentPropertyName = currentPropertyContext.name;\r\n                            currentPropertyContext.mimicks = value;\r\n                        }\r\n                    };\r\n                }\r\n\r\n                if (property === 'received' || property === 'didNotReceive') {\r\n                    return (count?: number) => {\r\n                        if (count === void 0)\r\n                            count = null;\r\n\r\n                        objectContext.setExpectations(count, property === 'didNotReceive');\r\n                        return thisProxy;\r\n                    };\r\n                }\r\n\r\n                const existingCall = objectContext.findActualPropertyCalls(property.toString())[0] || null;\r\n                if (existingCall) {\r\n                    const existingCallProperty = existingCall.property;\r\n                    if (existingCallProperty.type === 'function')\r\n                        return thisProxy;\r\n\r\n                    const expected = objectContext.calls.expected;\r\n                    if (expected && expected.callCount !== void 0) {\r\n                        expected.propertyName = existingCallProperty.name;\r\n\r\n                        this.assertCallMatchCount('property', expected, [existingCall]);\r\n                        return thisProxy;\r\n                    }\r\n\r\n                    existingCall.callCount++;\r\n\r\n                    if (existingCallProperty.returnValues)\r\n                        return existingCallProperty.returnValues[existingCall.callCount - 1];\r\n                    \r\n                    if(existingCallProperty.mimicks)\r\n                        return this;\r\n                }\r\n\r\n                const newPropertyContext = new ProxyPropertyContext();\r\n                newPropertyContext.name = property.toString();\r\n                newPropertyContext.type = 'object';\r\n                newPropertyContext.returnValues = null;\r\n\r\n                objectContext.property = newPropertyContext;\r\n\r\n                objectContext.addActualPropertyCall();\r\n\r\n                return thisProxy;\r\n            }\r\n        }) as any;\r\n    }\r\n\r\n    private static assertCallMatchCount(type: 'property' | 'method', expected: ProxyExpectation, existingCalls: ProxyCallRecord[]): void {\r\n        const existingCallCount = existingCalls.map(x => x.callCount).reduce((accumulator, value) => accumulator + value);\r\n        const isMatch = \r\n        !(\r\n            (\r\n                !expected.negated && (\r\n                    (expected.callCount === null && existingCallCount === 0) ||\r\n                    (expected.callCount !== null && expected.callCount !== existingCallCount)\r\n                )\r\n            ) ||\r\n            (\r\n                expected.negated && (\r\n                    (expected.callCount === null && existingCallCount !== 0) ||\r\n                    (expected.callCount !== null && expected.callCount === existingCallCount)\r\n                )\r\n            )\r\n        );\r\n        \r\n        if (!isMatch) {\r\n            let errorMessage = '';\r\n\r\n            errorMessage += expected.negated ? 'Did not expect' : 'Expected';\r\n            errorMessage += ' ';\r\n            errorMessage += expected.callCount === null ? 'one or more' : expected.callCount;\r\n            errorMessage += ' call';\r\n            errorMessage += (expected.callCount === null || expected.callCount !== 1) ? 's' : '';\r\n            errorMessage += ' to the ';\r\n            errorMessage += type;\r\n            errorMessage += ' ';\r\n            errorMessage += expected.propertyName;\r\n\r\n            if(expected.arguments) {\r\n                if(type === 'property') {\r\n                    errorMessage += ' with value ';\r\n\r\n                    const value = expected.arguments[0];\r\n                    if(value === null)\r\n                        errorMessage += 'null';\r\n                    \r\n                    if(value === void 0)\r\n                        errorMessage += 'undefined';\r\n\r\n                    if(value)\r\n                        errorMessage += value;\r\n                } else if(type === 'method') {\r\n                    errorMessage += ' with arguments ';\r\n                    errorMessage += stringifyArguments(expected.arguments);\r\n                }\r\n            }\r\n\r\n            errorMessage += ', but received ';\r\n            errorMessage += existingCallCount === 0 ? 'none' : existingCallCount;\r\n\r\n            if(expected.arguments) {\r\n                errorMessage += ' of such call';\r\n                errorMessage += existingCallCount !== 1 ? 's' : '';\r\n            }\r\n\r\n            errorMessage += '.';\r\n\r\n            if(expected.arguments) {\r\n                errorMessage += '\\nCalls received to ';\r\n                errorMessage += type;\r\n                errorMessage += ' ';\r\n                errorMessage += expected.propertyName;\r\n                errorMessage += ' in general: ';\r\n                errorMessage += stringifyCalls(existingCalls);\r\n            }\r\n\r\n            throw new Error(errorMessage);\r\n        }\r\n    }\r\n}"]}
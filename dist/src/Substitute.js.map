{"version":3,"file":"Substitute.js","sourceRoot":"","sources":["../../src/Substitute.ts"],"names":[],"mappings":";;AAAA,qCAAoC;AAGpC;IAAA;IAiGA,CAAC;IAhGU,cAAG,GAAV;QACI,IAAM,aAAa,GAAG,IAAI,iBAAO,EAAE,CAAC;QACpC,OAAO,aAAa,CAAC,SAAS,CAAC;IACnC,CAAC;IA6FL,iBAAC;AAAD,CAAC,AAjGD,IAiGC;AAjGY,gCAAU","sourcesContent":["import { Context } from \"./Context\";\r\nimport { ObjectSubstitute, OmitProxyMethods } from \"./Transformations\";\r\n\r\nexport class Substitute {\r\n    static for<T>(): ObjectSubstitute<OmitProxyMethods<T>, T> {\r\n        const objectContext = new Context();\r\n        return objectContext.rootProxy;\r\n    }\r\n\r\n    // private static assertCallMatchCount(\r\n    //     type: 'property' | 'method', \r\n    //     thisProxy: any,\r\n    //     objectContext: ProxyObjectContext, \r\n    //     allCalls: ProxyCallRecord[],\r\n    //     matchingCalls: ProxyCallRecord[]): void \r\n    // {\r\n    //     const expected = objectContext.calls.expected;\r\n    //     objectContext.property = null;\r\n    //     objectContext.calls.expected = null;\r\n                        \r\n    //     thisProxy[areProxiesDisabledKey] = false;\r\n\r\n    //     const getCallCounts = (calls: ProxyCallRecord[]) => {\r\n    //         const callCounts = calls.map(x => x.callCount);\r\n    //         const totalCallCount = callCounts.length === 0 ? 0 : callCounts.reduce((accumulator, value) => accumulator + value);\r\n    //         return totalCallCount;\r\n    //     }\r\n\r\n    //     const matchingCallsCount = getCallCounts(matchingCalls);\r\n\r\n    //     const isMatch = \r\n    //     !(\r\n    //         (\r\n    //             !expected.negated && (\r\n    //                 (expected.callCount === null && matchingCallsCount === 0) ||\r\n    //                 (expected.callCount !== null && expected.callCount !== matchingCallsCount)\r\n    //             )\r\n    //         ) ||\r\n    //         (\r\n    //             expected.negated && (\r\n    //                 (expected.callCount === null && matchingCallsCount !== 0) ||\r\n    //                 (expected.callCount !== null && expected.callCount === matchingCallsCount)\r\n    //             )\r\n    //         )\r\n    //     );\r\n        \r\n    //     if (!isMatch) {\r\n    //         let errorMessage = '';\r\n\r\n    //         errorMessage += expected.negated ? 'Did not expect' : 'Expected';\r\n    //         errorMessage += ' ';\r\n    //         errorMessage += expected.callCount === null ? 'one or more' : expected.callCount;\r\n    //         errorMessage += ' call';\r\n    //         errorMessage += (expected.callCount === null || expected.callCount !== 1) ? 's' : '';\r\n    //         errorMessage += ' to the ';\r\n    //         errorMessage += type;\r\n    //         errorMessage += ' ';\r\n    //         errorMessage += expected.propertyName;\r\n\r\n    //         if(expected.arguments) {\r\n    //             if(type === 'property') {\r\n    //                 errorMessage += ' with value ';\r\n\r\n    //                 const value = expected.arguments[0];\r\n    //                 if(value === null)\r\n    //                     errorMessage += 'null';\r\n                    \r\n    //                 if(value === void 0)\r\n    //                     errorMessage += 'undefined';\r\n\r\n    //                 if(value)\r\n    //                     errorMessage += value;\r\n    //             } else if(type === 'method') {\r\n    //                 errorMessage += ' with ';\r\n    //                 errorMessage += stringifyArguments(expected.arguments);\r\n    //             }\r\n    //         }\r\n\r\n    //         errorMessage += ', but received ';\r\n    //         errorMessage += matchingCallsCount === 0 ? 'none' : matchingCallsCount;\r\n\r\n    //         if(expected.arguments) {\r\n    //             errorMessage += ' of such call';\r\n    //             errorMessage += matchingCallsCount !== 1 ? 's' : '';\r\n    //         }\r\n\r\n    //         errorMessage += '.';\r\n\r\n    //         if(expected.arguments) {\r\n    //             errorMessage += '\\nAll calls received to ';\r\n    //             errorMessage += type;\r\n    //             errorMessage += ' ';\r\n    //             errorMessage += expected.propertyName;\r\n    //             errorMessage += ':';\r\n    //             errorMessage += stringifyCalls(allCalls);\r\n    //         }\r\n\r\n    //         throw new Error(errorMessage);\r\n    //     }\r\n    // }\r\n}"]}
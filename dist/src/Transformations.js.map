{"version":3,"file":"Transformations.js","sourceRoot":"","sources":["../../src/Transformations.ts"],"names":[],"mappings":"","sourcesContent":["export type FunctionSubstitute<TArguments extends any[], TReturnType> = ((...args: TArguments) => (TReturnType & MockObjectMixin<TReturnType>)) & {\r\n    mimicks: (functionReference: ((...args: TArguments) => TReturnType)) => void;\r\n}\r\n\r\nexport type PropertySubstitute<TInstanceType, TReturnType> = TReturnType & Partial<MockObjectMixin<TReturnType>> & {\r\n    mimicks?: (instance: TInstanceType) => void;\r\n}\r\n\r\ntype MockObjectMixin<T> = {\r\n    returns: (...args: T[]) => void;\r\n    returnsUsing: (functionReference: () => T) => void;\r\n}\r\n\r\nexport type ObjectSubstitute<T extends Object> = ObjectSubstituteTransformation<T> & {\r\n    received(amount?: number): T;\r\n    mimick(instance: T): void;\r\n}\r\n\r\ntype ObjectSubstituteTransformation<T extends Object> = {\r\n    [P in keyof T]:\r\n    T[P] extends (...args: infer F) => infer R ? FunctionSubstitute<F, R> :\r\n    PropertySubstitute<T, T[P]>;\r\n}"]}
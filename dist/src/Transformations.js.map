{"version":3,"file":"Transformations.js","sourceRoot":"","sources":["../../src/Transformations.ts"],"names":[],"mappings":"","sourcesContent":["import { AllArguments } from \"./Arguments\";\r\n\r\nexport type NoArgumentFunctionSubstitute<TReturnType> = \r\n    (() => (TReturnType & NoArgumentMockObjectMixin<TReturnType>))\r\n\r\nexport type FunctionSubstitute<TArguments extends any[], TReturnType> = \r\n    ((...args: TArguments) => (TReturnType & MockObjectMixin<TArguments, TReturnType>)) & \r\n    ((allArguments: AllArguments) => (TReturnType & MockObjectMixin<TArguments, TReturnType>))\r\n\r\nexport type PropertySubstitute<TReturnType> = TReturnType & Partial<NoArgumentMockObjectMixin<TReturnType>>\r\n\r\ntype BaseMockObjectMixin<TReturnType> = {\r\n    returns: (...args: TReturnType[]) => void;\r\n}\r\n\r\ntype NoArgumentMockObjectMixin<TReturnType> = BaseMockObjectMixin<TReturnType> & {\r\n    mimicks: (func: () => TReturnType) => void;\r\n}\r\n\r\ntype MockObjectMixin<TArguments extends any[], TReturnType> = BaseMockObjectMixin<TReturnType> & {\r\n    mimicks: (func: (...args: TArguments) => TReturnType) => void;\r\n}\r\n\r\nexport type ObjectSubstitute<T extends Object> = ObjectSubstituteTransformation<T> & {\r\n    received(amount?: number): T;\r\n    mimick(instance: T): void;\r\n}\r\n\r\ntype ObjectSubstituteTransformation<T extends Object> = {\r\n    [P in keyof T]:\r\n    T[P] extends () => infer R ? NoArgumentFunctionSubstitute<R> :\r\n    T[P] extends (...args: infer F) => infer R ? FunctionSubstitute<F, R> :\r\n    PropertySubstitute<T[P]>;\r\n}"]}
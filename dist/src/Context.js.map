{"version":3,"file":"Context.js","sourceRoot":"","sources":["../../src/Context.ts"],"names":[],"mappings":"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","sourcesContent":["import { areArgumentsEqual } from \"./Utilities\";\r\n\r\nexport abstract class ProxyPropertyContextBase {\r\n    name: string;\r\n    mimicks: MimickInstanceContext|MimickObjectContext;\r\n\r\n    type: 'function' | 'object';\r\n\r\n    constructor() {\r\n        this.name = null;\r\n        this.type = null;\r\n    }\r\n}\r\n\r\nexport abstract class MimickContextBase {\r\n    type: 'instance' | 'function';\r\n}\r\n\r\n\r\n\r\nexport class ProxyPropertyContext extends ProxyPropertyContextBase {\r\n    type: 'object';\r\n    \r\n    returnValues: any[];\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    promoteToMethod(): ProxyMethodPropertyContext {\r\n        const methodContext = this as any as ProxyMethodPropertyContext;\r\n        methodContext.method = new ProxyMethodContext();\r\n        methodContext.type = 'function';\r\n\r\n        return methodContext;\r\n    }\r\n}\r\n\r\nexport class ProxyMethodPropertyContext extends ProxyPropertyContextBase {\r\n    method: ProxyMethodContext;\r\n\r\n    type: 'function';\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.method = new ProxyMethodContext();\r\n    }\r\n}\r\n\r\nexport class ProxyMethodContext {\r\n    arguments: any[];\r\n    returnValues: any[];\r\n\r\n    constructor() {\r\n        this.arguments = [];\r\n    }\r\n}\r\n\r\nexport class ProxyCallRecords {\r\n    expected: ProxyExpectation;\r\n    actual: ProxyCallRecord[];\r\n\r\n    constructor() {\r\n        this.expected = null;\r\n        this.actual = [];\r\n    }\r\n}\r\n\r\nexport class ProxyExpectation {\r\n    callCount: number;\r\n    negated: boolean;\r\n    propertyName: string;\r\n    arguments: Array<any>;\r\n\r\n    constructor() {\r\n        this.callCount = void 0;\r\n        this.negated = false;\r\n    }\r\n}\r\n\r\nexport class ProxyObjectContext {\r\n    property: ProxyPropertyContext|ProxyMethodPropertyContext;\r\n    calls: ProxyCallRecords;\r\n\r\n    constructor() {\r\n        this.calls = new ProxyCallRecords();\r\n        this.property = new ProxyPropertyContext();\r\n    }\r\n\r\n    setExpectations(count: number, negated: boolean) {\r\n        const call = new ProxyExpectation();\r\n        call.callCount = count;\r\n        call.negated = negated;\r\n\r\n        this.calls.expected = call;\r\n    }\r\n\r\n    findActualPropertyCalls(propertyName: string) {\r\n        return this.calls.actual.filter(x => \r\n            x.property.name === propertyName);\r\n    }\r\n\r\n    findActualMethodCalls(propertyName: string, args: any[]) {\r\n        let result = this.calls\r\n            .actual\r\n            .filter(x => x.property.name === propertyName)\r\n            .filter(x => {\r\n                if(x.property.type !== 'function') return false;\r\n                \r\n                const args1 = x.property.method.arguments;\r\n                const args2 = args;\r\n\r\n                if(!args1 || !args2)\r\n                    return false;\r\n\r\n                if(args1.length !== args2.length)\r\n                    return false;\r\n\r\n                for(let i=0;i<args1.length;i++) {\r\n                    const arg1 = args1[i];\r\n                    const arg2 = args2[i];\r\n\r\n                    if(!areArgumentsEqual(arg1, arg2))\r\n                        return false;\r\n                }\r\n\r\n                return true;\r\n            });\r\n\r\n        return result;\r\n    }\r\n\r\n    getLastCall() {\r\n        return this.calls.actual[this.calls.actual.length-1];\r\n    }\r\n\r\n    addActualPropertyCall() {\r\n        let existingCall: ProxyCallRecord;\r\n\r\n        const existingCallCandidates = this.calls.actual.filter(x => \r\n            x.property.name === this.property.name);\r\n\r\n        const thisProperty = this.property;\r\n        if(thisProperty.type === 'function') {\r\n            existingCall = existingCallCandidates.filter(x => \r\n                x.property.type === thisProperty.type && \r\n                areArgumentsEqual(x.property.method.arguments, thisProperty.method.arguments))[0];\r\n        } else {\r\n            existingCall = existingCallCandidates[0];\r\n        }\r\n            \r\n        if(!existingCall) {\r\n            existingCall = new ProxyCallRecord(this.property);\r\n            this.calls.actual.push(existingCall);\r\n        }\r\n\r\n        existingCall.callCount++;\r\n    }\r\n}\r\n\r\nexport class ProxyCallRecord {\r\n    callCount: number;\r\n    property: ProxyPropertyContext | ProxyMethodPropertyContext;\r\n\r\n    constructor(property?: ProxyPropertyContext | ProxyMethodPropertyContext) {\r\n        this.callCount = 0;\r\n        this.property = property || null;\r\n    }\r\n}"]}
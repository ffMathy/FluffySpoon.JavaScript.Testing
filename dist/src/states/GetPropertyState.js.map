{"version":3,"file":"GetPropertyState.js","sourceRoot":"","sources":["../../../src/states/GetPropertyState.ts"],"names":[],"mappings":"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","sourcesContent":["import { ContextState, PropertyKey } from \"./ContextState\";\r\nimport { Context } from \"src/Context\";\r\nimport { FunctionState } from \"./FunctionState\";\r\nimport { areArgumentsEqual, areArgumentArraysEqual } from \"../Utilities\";\r\n\r\nconst Nothing = Symbol();\r\n\r\nexport class GetPropertyState implements ContextState {\r\n    private returns: any[]|Symbol;\r\n    private mimicks: Function;\r\n\r\n    private _callCount: number;\r\n    private _recordedFunctionStates: FunctionState[];\r\n\r\n    private get isFunction() {\r\n        return this._recordedFunctionStates.length > 0;\r\n    }\r\n\r\n    public get property() {\r\n        return this._property;\r\n    }\r\n\r\n    public get callCount() {\r\n        return this._callCount;\r\n    }\r\n\r\n    public get recordedFunctionStates() {\r\n        return [...this._recordedFunctionStates];\r\n    }\r\n\r\n    constructor(private _property: PropertyKey) {\r\n        this.returns = Nothing;\r\n        this._recordedFunctionStates = [];\r\n        this._callCount = 0;\r\n    }\r\n\r\n    apply(context: Context, args: any[]) {\r\n        this._callCount = 0;\r\n\r\n        const matchingFunctionState = this._recordedFunctionStates.find(x => areArgumentArraysEqual(x.arguments, args));\r\n        if(matchingFunctionState) {\r\n            console.log('ex-func');\r\n            return matchingFunctionState.apply(context, args);\r\n        }\r\n\r\n        var functionState = new FunctionState(this, ...args);\r\n        context.state = functionState;\r\n\r\n        this._recordedFunctionStates.push(functionState);\r\n\r\n        console.log('states', this._recordedFunctionStates);\r\n\r\n        return context.apply(args);\r\n    }\r\n\r\n    set(context: Context, property: PropertyKey, value: any) {\r\n    }\r\n\r\n    get(context: Context, property: PropertyKey) {\r\n        const hasExpectations = context.initialState.hasExpectations;\r\n\r\n        if (property === 'then')\r\n            return void 0;\r\n\r\n        if(this.isFunction)\r\n            return context.proxy;\r\n\r\n        if(property === 'mimicks') {\r\n            return (input: Function) => {\r\n                console.log('mimicks', input);\r\n\r\n                this.mimicks = input;\r\n                this._callCount--;\r\n\r\n                context.state = context.initialState;\r\n            }\r\n        }\r\n\r\n        if(property === 'returns') {\r\n            if(this.returns !== Nothing)\r\n                throw new Error('The return value for the property ' + this._property.toString() + ' has already been set to ' + this.returns);\r\n\r\n            return (...returns: any[]) => {\r\n                console.log('returns', returns);\r\n\r\n                this.returns = returns;\r\n                this._callCount--;\r\n\r\n                context.state = context.initialState;\r\n            };\r\n        }\r\n\r\n        if(!hasExpectations) {\r\n            this._callCount++;\r\n\r\n            if(this.mimicks) {\r\n                console.log('mim-invoke');\r\n                return this.mimicks.apply(this.mimicks);\r\n            }\r\n\r\n            if(this.returns !== Nothing)\r\n                return this.returns[this._callCount-1];\r\n        }\r\n\r\n        context.initialState.assertCallCountMatchesExpectations(\r\n            context.initialState.getPropertyStates,\r\n            this.callCount,\r\n            'property',\r\n            this.property,\r\n            []);\r\n\r\n        return context.proxy;\r\n    }\r\n}"]}
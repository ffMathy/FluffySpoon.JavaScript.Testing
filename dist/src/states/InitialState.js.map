{"version":3,"file":"InitialState.js","sourceRoot":"","sources":["../../../src/states/InitialState.ts"],"names":[],"mappings":"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","sourcesContent":["import { ContextState, PropertyKey } from \"./ContextState\";\r\nimport { Context } from \"src/Context\";\r\nimport { GetPropertyState } from \"./GetPropertyState\";\r\nimport { SetPropertyState } from \"./SetPropertyState\";\r\nimport { areArgumentArraysEqual } from \"../Utilities\";\r\n\r\nexport class InitialState implements ContextState {\r\n    private recordedGetPropertyStates: Map<PropertyKey, GetPropertyState>;\r\n    private recordedSetPropertyStates: SetPropertyState[];\r\n    \r\n    private _expectedCount: number;\r\n\r\n    public get expectedCount() {\r\n        return this._expectedCount;\r\n    }\r\n\r\n    public get hasExpectations() {\r\n        return this._expectedCount !== void 0;\r\n    }\r\n\r\n    constructor() {\r\n        this.recordedGetPropertyStates = new Map();\r\n        this.recordedSetPropertyStates = [];\r\n\r\n        this._expectedCount = void 0;\r\n    }\r\n\r\n    doesCallCountMatchExpectations(callCount: number) {\r\n        if (!this.hasExpectations)\r\n            return true;\r\n\r\n        if (this.expectedCount === null && callCount > 0)\r\n            return true;\r\n\r\n        return this.expectedCount === callCount;\r\n    }\r\n\r\n    apply(context: Context, args: any[]) {\r\n    }\r\n\r\n    set(context: Context, property: PropertyKey, value: any) {\r\n        const existingSetState = this.recordedSetPropertyStates.find(x => x.arguments[0] === value);;\r\n        if (existingSetState) {\r\n            console.log('ex-prop');\r\n            return existingSetState.set(context, property, value);\r\n        }\r\n\r\n        if (this.hasExpectations)\r\n            throw new Error('No calls were made to property ' + property.toString() + ' but ' + this._expectedCount + ' calls were expected.');\r\n\r\n        const setPropertyState = new SetPropertyState(property, value);\r\n        context.state = setPropertyState;\r\n\r\n        this.recordedSetPropertyStates.push(setPropertyState);\r\n\r\n        console.log('states', this.recordedSetPropertyStates);\r\n\r\n        return setPropertyState.set(context, property, value);\r\n    }\r\n\r\n    get(context: Context, property: PropertyKey) {\r\n        if (typeof property === 'symbol') {\r\n            if (property === Symbol.toPrimitive)\r\n                return () => '{SubstituteJS fake}';\r\n\r\n            if (property === Symbol.iterator)\r\n                return void 0;\r\n\r\n            if (property === Symbol.toStringTag)\r\n                return 'Substitute';\r\n\r\n            if(property.toString() === 'Symbol(util.inspect.custom)')\r\n                return void 0;\r\n        }\r\n\r\n        if (property === 'valueOf')\r\n            return '{SubstituteJS fake}';\r\n\r\n        if (property === '$$typeof')\r\n            return '{SubstituteJS fake}';\r\n\r\n        if (property === 'length')\r\n            return '{SubstituteJS fake}';\r\n\r\n        if (property === 'toString')\r\n            return '{SubstituteJS fake}';\r\n\r\n        if (property === 'inspect')\r\n            return () => '{SubstituteJS fake}';\r\n\r\n        if (property === 'constructor')\r\n            return () => context.rootProxy;\r\n\r\n        if (property === 'received') {\r\n            return (count?: number) => {\r\n                console.log('expectation', count);\r\n\r\n                this._expectedCount = count === void 0 ? null : count;\r\n                return context.proxy;\r\n            };\r\n        }\r\n\r\n        const existingGetState = this.recordedGetPropertyStates.get(property);\r\n        if (existingGetState) {\r\n            context.state = existingGetState;\r\n            return context.get(property);\r\n        }\r\n\r\n        if (this.hasExpectations)\r\n            throw new Error('No calls were made to property or method ' + property.toString() + ' but ' + this._expectedCount + ' calls were expected.');\r\n\r\n        const getState = new GetPropertyState(property);\r\n        context.state = getState;\r\n\r\n        this.recordedGetPropertyStates.set(property, getState);\r\n\r\n        return context.get(property);\r\n    }\r\n}"]}
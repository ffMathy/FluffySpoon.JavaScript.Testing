{"version":3,"file":"index.test.js","sourceRoot":"","sources":["../../spec/index.test.ts"],"names":[],"mappings":"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","sourcesContent":["import test from 'ava';\r\n\r\nimport { Substitute, Arg } from '../src/Index';\r\nimport { areArgumentsEqual } from '../src/Utilities';\r\nimport { OmitProxyMethods, ObjectSubstitute } from '../src/Transformations';\r\n\r\nclass Dummy {\r\n\r\n}\r\n\r\nexport class Example {\r\n\ta = \"1337\";\r\n\r\n\tc(arg1: string, arg2: string) {\r\n\t\treturn \"hello \" + arg1 + \" world (\" + arg2 + \")\";\r\n\t}\r\n\r\n\tget d() {\r\n\t\treturn 1337;\r\n\t}\r\n\r\n\tset v(x: string) {\r\n\t\tconsole.log('define: ' + x);\r\n\t}\r\n\r\n\treceived(stuff: number|string) {\r\n\r\n\t}\r\n\r\n\treturnPromise() {\r\n\t\treturn Promise.resolve(new Dummy());\r\n\t}\r\n\r\n\tfoo() {\r\n\t\treturn 'stuff';\r\n\t}\r\n}\r\n\r\nlet instance: Example;\r\nlet substitute: ObjectSubstitute<OmitProxyMethods<Example>, Example>;\r\n\r\ntest.beforeEach(() => {\r\n\tinstance = new Example();\r\n\tsubstitute = Substitute.for<Example>();\r\n});\r\n\r\n// test('class method returns with specific args', t => {\r\n// \tsubstitute.c(\"hi\", \"there\").returns(\"blah\", \"haha\");\r\n\r\n// \tt.is(substitute.c(\"hi\", \"there\"), 'blah');\r\n// \tt.is(substitute.c(\"hi\", \"there\"), 'haha');\r\n// \tt.is(substitute.c(\"hi\", \"there\"), void 0);\r\n// \tt.is(substitute.c(\"hi\", \"there\"), void 0);\r\n// });\r\n\r\n// test('returning other fake from promise works', async t => {\r\n// \tconst otherSubstitute = Substitute.for<Dummy>();\r\n// \tsubstitute.returnPromise().returns(Promise.resolve(otherSubstitute));\r\n\r\n// \tt.is(otherSubstitute, await substitute.returnPromise());\r\n// });\r\n\r\n// test('returning resolved promises works', async t => {\r\n// \tsubstitute.returnPromise().returns(Promise.resolve(1338));\r\n\r\n// \tt.is(1338, await substitute.returnPromise());\r\n// });\r\n\r\ntest('class string field set received', t => {\r\n\tsubstitute.v = undefined;\r\n\tsubstitute.v = null;\r\n\tsubstitute.v = 'hello';\r\n\tsubstitute.v = 'hello';\r\n\tsubstitute.v = 'world';\r\n\t\r\n\tt.notThrows(() => substitute.received(5).v = Arg.any());\r\n\t// t.notThrows(() => substitute.received().v = 'hello');\r\n\t// t.notThrows(() => substitute.received().v = Arg.any());\r\n\t// t.notThrows(() => substitute.received(2).v = 'hello');\r\n\t// t.notThrows(() => substitute.received(2).v = Arg.is(x => x && x.indexOf('ll') > -1));\r\n\r\n\t// t.throws(() => substitute.received(2).v = Arg.any());\r\n\t// t.throws(() => substitute.received(1).v = Arg.any());\r\n\t// t.throws(() => substitute.received(1).v = Arg.is(x => x && x.indexOf('ll') > -1));\r\n\t// t.throws(() => substitute.received(3).v = 'hello');\r\n});\r\n\r\n// test('partial mocks using function mimicks with specific args', t => {\r\n// \tsubstitute.c('a', 'b').mimicks(instance.c);\r\n\r\n// \tt.is<any>(substitute.c('c', 'b'), substitute);\r\n// \tt.is(substitute.c('a', 'b'), 'hello a world (b)');\r\n// });\r\n\r\n// test('class method returns with placeholder args', t => {\r\n// \tsubstitute.c(Arg.any(), \"there\").returns(\"blah\", \"haha\");\r\n\t\r\n// \tt.is(substitute.c(\"hi\", \"there\"), 'blah');\r\n// \tt.is<any>(substitute.c(\"hi\", \"the1re\"), substitute);\r\n// \tt.is(substitute.c(\"his\", \"there\"), 'haha');\r\n// \tt.is<any>(substitute.c(\"his\", \"there\"), void 0);\r\n// \tt.is<any>(substitute.c(\"hi\", \"there\"), void 0);\r\n// });\r\n\r\n// test('class void returns', t => {\r\n// \tsubstitute.foo().returns(void 0, null);\r\n\r\n// \tt.is(substitute.foo(), void 0);\r\n// \tt.is(substitute.foo(), null);\r\n// }); \r\n\r\n// test('class method received', t => {\r\n// \tvoid substitute.c(\"hi\", \"there\");\r\n// \tvoid substitute.c(\"hi\", \"the1re\");\r\n// \tvoid substitute.c(\"hi\", \"there\");\r\n// \tvoid substitute.c(\"hi\", \"there\");\r\n// \tvoid substitute.c(\"hi\", \"there\");\r\n\r\n// \tt.notThrows(() => substitute.received(4).c('hi', 'there'));\r\n// \tt.notThrows(() => substitute.received(1).c('hi', 'the1re'));\r\n// \tt.notThrows(() => substitute.received().c('hi', 'there'));\r\n\r\n// \tt.throws(() => substitute.received(7).c('hi', 'there'), \r\n// `Expected 7 calls to the method c with arguments [hi, there], but received 4 of such calls.\r\n// All calls received to method c:\r\n// -> 4 calls with arguments [hi, there]\r\n// -> 1 call with arguments [hi, the1re]`);\r\n// });\r\n\r\n// test('received call matches after partial mocks using property instance mimicks', t => {\r\n// \tsubstitute.d.mimicks(() => instance.d);\r\n// \tsubstitute.c('lala', 'bar');\r\n\r\n// \tsubstitute.received(1).c('lala', 'bar');\r\n// \tsubstitute.received(1).c('lala', 'bar');\r\n\r\n// \tt.notThrows(() => substitute.received(1).c('lala', 'bar'));\r\n// \tt.throws(() => substitute.received(2).c('lala', 'bar'),\r\n// `Expected 2 calls to the method c with arguments [lala, bar], but received 1 of such call.\r\n// All calls received to method c:\r\n// -> 1 call with arguments [lala, bar]`);\r\n\t\r\n// \tt.deepEqual(substitute.d, 1337);\r\n// });\r\n\r\n// test('can call received twice', t => { \r\n// \tt.throws(() => substitute.received(1337).c('foo', 'bar'), \r\n// `Expected 1337 calls to the method c with arguments [foo, bar], but received none of such calls.\r\n// All calls received to method c: (no calls)`);\r\n\r\n// \tt.throws(() => substitute.received(2117).c('foo', 'bar'),\r\n// `Expected 2117 calls to the method c with arguments [foo, bar], but received none of such calls.\r\n// All calls received to method c: (no calls)`);\r\n// });\r\n\r\n// test('class string field get received', t => {\r\n// \tvoid substitute.a;\r\n// \tvoid substitute.a;\r\n// \tvoid substitute.a;\r\n// \tvoid substitute.a;\r\n\r\n// \tt.throws(() => substitute.received(3).a);\r\n// \tt.notThrows(() => substitute.received().a);\r\n// \tt.notThrows(() => substitute.received(4).a);\r\n// });\r\n\r\n// test('class with method called \"received\" can be used for call count verification when proxies are suspended', t => {\r\n// \tSubstitute.disableFor(substitute).received(2);\r\n\r\n// \tt.throws(() => substitute.received(2).received(2));\r\n// \tt.notThrows(() => substitute.received(1).received(2));\r\n// });\r\n\r\n// test('class with method called \"received\" can be used for call count verification', t => {\r\n// \tSubstitute.disableFor(substitute).received('foo');\r\n\r\n// \tt.notThrows(() => substitute.received(1).received('foo'));\r\n// \tt.throws(() => substitute.received(2).received('foo'));\r\n// });\r\n\r\n// test('partial mocks using property instance mimicks', t => {\r\n// \tsubstitute.d.mimicks(() => instance.d);\r\n\r\n// \tt.deepEqual(substitute.d, 1337);\r\n// });\r\n\r\n// test('partial mocks using function mimicks with all args', t => {\r\n// \tsubstitute.c(Arg.all()).mimicks(instance.c);\r\n\r\n// \tt.deepEqual(substitute.c('a', 'b'), 'hello a world (b)');\r\n// });\r\n\r\n// test('are arguments equal', t => {\r\n// \tt.true(areArgumentsEqual(Arg.any(), 'hi'));\r\n// \tt.true(areArgumentsEqual(Arg.any('array'), ['foo', 'bar']));\r\n\r\n// \tt.false(areArgumentsEqual(['foo', 'bar'], ['foo', 'bar']));\r\n// \tt.false(areArgumentsEqual(Arg.any('array'), 1337));\r\n// });\r\n\r\n// test('class string field get returns', t => {\r\n// \tsubstitute.a.returns(\"foo\", \"bar\");\r\n\r\n// \tt.deepEqual(substitute.a, 'foo');\r\n// \tt.deepEqual(substitute.a, 'bar');\r\n// \tt.deepEqual(substitute.a, void 0);\r\n// \tt.deepEqual(substitute.a, void 0);\r\n// });"]}